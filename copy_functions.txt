from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






from textnode import TextNode
import os
import shutil
from htmlnode import markdown_to_html_node, extract_title


def main():

    copy_folder("./static", "./public")
    generate_pages_recursive("./content", "./template.html", "./public")


def copy_folder(source, destination):
    # print(f"source: {source} | destination: {destination}")
    if os.path.exists(destination):
        # If the destination exists, delete it
        shutil.rmtree(destination)

    if os.path.exists(source):
        # If the source exists, make the destination folder and copy all the files from source to destination
        os.mkdir(destination)
        helper_copy_folder(source, destination)


def helper_copy_folder(path, destination):

    source_folder = os.listdir(path)
    for file in source_folder:
        current_path_with_file = os.path.join(path, file)
        destination_path_with_file = os.path.join(destination, file)

        if os.path.isdir(current_path_with_file):
            os.mkdir(destination_path_with_file)
            helper_copy_folder(current_path_with_file, destination_path_with_file)
        else:
            # print(f"file:{file} |{current_path_with_file} | {destination_path_with_file}")
            shutil.copy(current_path_with_file, f"{destination}")


def generate_page(from_path, template_path, dest_path):
    print(f"Generating page from {from_path} to {dest_path} using {template_path}")

    # Read and create new file
    markdown_file = open(from_path, "r").read()
    html_file = open(template_path, "r").read()
    destination_file = open(dest_path, "w")

    # Convert markdown to html file
    html_converted = markdown_to_html_node(markdown_file).to_html()
    # Extract title of the file
    title = extract_title(markdown_file)
    # Write the full html file based on the template
    full_html = html_file.replace("{{ Title }}", title).replace(
        "{{ Content }}", html_converted
    )
    # Write the file to the new destination
    destination_file.write(full_html)


def generate_pages_recursive(dir_path_content, template_path, dest_dir_path):

    source_folder = os.listdir(dir_path_content)
    # print(f"dest_dir_path: {dest_dir_path}")
    for file in source_folder:
        current_path_with_file = os.path.join(dir_path_content, file)
        destination_path_with_file = os.path.join(
            dest_dir_path, file
        ).replace(".md", ".html")

        # print(
        #     f"{file} | current_path_with_file: {current_path_with_file} | destination_path_with_file: {destination_path_with_file}"
        # )
        if os.path.isfile(current_path_with_file):
            generate_page(
                current_path_with_file, template_path, destination_path_with_file
            )
        else:
            os.mkdir(destination_path_with_file)
            generate_pages_recursive(current_path_with_file, template_path, destination_path_with_file)


if __name__ == "__main__":
    main()


-------CUT THE READING FILE HERE------
## textnode.py

from extract_link import extract_markdown_links, extract_markdown_images



class TextNode:
    def __init__(self, text, text_type, url=None):
        self.text = text
        self.text_type = text_type
        self.url = url

    def __eq__(self, other):
        if (
            self.text == other.text
            and self.text_type == other.text_type
            and self.url == other.url
        ):
            return True
        else:
            return False

    def __repr__(self):
        return f"TextNode({self.text}, {self.text_type}, {self.url})"


def split_nodes_delimiter(old_nodes, delimiter, text_type):
    result_nodes = []

    for node in old_nodes:
        if node.text_type == "text":
            text_list = node.text.split(delimiter)
            if len(text_list) % 2 == 0:
                raise Exception(
                    "One of the markdown line has incorrect inline format (bold,italic, quote), please check again"
                )
            for i in range(len(text_list)):
                if text_list[i] == "":
                    continue
                if i % 2 == 0:
                    result_nodes.append(TextNode(text_list[i], "text"))
                else:
                    result_nodes.append(TextNode(text_list[i], text_type))
        else:
            result_nodes.append(node)
    return result_nodes


def split_nodes_image(list_of_nodes):
    result = []

    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue
        
        link_list = extract_markdown_images(node.text)
        if link_list == []:
            result.append(TextNode(node.text, "text"))
            continue
        text = node.text
        for link in link_list:
            sections = text.split(f"![{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "image", link[1]))
            
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))
    return result


def split_nodes_link(list_of_nodes):
    result = []
    for node in list_of_nodes:
        if node.text_type != "text":
            result.append(node)
            continue

        link_list = extract_markdown_links(node.text)
        text = node.text
        if link_list == []:
            result.append(TextNode(text, "text"))
            continue
        
        for link in link_list:
            sections = text.split(f"[{link[0]}]({link[1]})", 1)
            if sections[0] != "":
                result.append(TextNode(sections[0], "text"))
            result.append(TextNode(link[0], "link", link[1]))
            text = sections[1]
        if text != "":
            result.append(TextNode(text, "text"))

    return result



def text_to_textnodes(text):
    bold = split_nodes_delimiter([TextNode(text, "text")], "**", "bold")
    italic = split_nodes_delimiter(bold, "*", "italic")
    code = split_nodes_delimiter(italic, "`", "code")

    return split_nodes_link(split_nodes_image(code))





-------CUT THE READING FILE HERE------
## extract_link.py

import re
def extract_markdown_images(text):
    matches = re.findall(r"!\[(.*?)\]\((.*?)\)", text)
    return matches

def extract_markdown_links(text):
    matches = re.findall(r"\[(.*?)\]\((.*?)\)", text)
    return matches





-------CUT THE READING FILE HERE------
## htmlnode.py

from block import markdown_to_blocks, block_to_block_type

from textnode import text_to_textnodes
import re


class HTMLNode:
    def __init__(self, tag=None, value=None, children=None, props=None):
        self.tag = tag
        self.value = value
        self.children = children
        self.props = props

    def to_html(self):
        pass

    def props_to_html(self):
        html = ""
        if self.props is not None:
            for key, value in self.props.items():
                html += f' {key}="{value}"'
            return html
        return html

    def __repr__(self):
        return f"HTMLNode(tag={self.tag}, value={self.value}, children={self.children}, props={self.props})"


class LeafNode(HTMLNode):
    def __init__(self, tag, value, props=None):
        super().__init__(tag=tag, value=value, children=None, props=props)

    def to_html(self):
        if self.value is None:
            raise ValueError("Value cannot be None")
        elif self.tag is None:
            return f"{self.value}"
        else:
            if self.tag == "img":
                return f"<{self.tag} {self.props_to_html()}/>"
            return f"<{self.tag} {self.props_to_html()}>{self.value}</{self.tag}>"

    def __repr__(self):
        return f"LeafNode(tag={self.tag}, value={self.value}, props={self.props})"


class ParentNode(HTMLNode):
    def __init__(self, tag, children, props=None):
        super().__init__(tag=tag, value=None, children=children, props=props)

    def to_html(self):
        if self.tag is None:
            raise ValueError("Tag cannot be None")
        if self.children is None:
            raise ValueError("Children cannot be None")
        else:
            start_string = f"<{self.tag}>"
            content = ""
            end_string = f"</{self.tag}>"

        for child in self.children:
            content += child.to_html()

        return start_string + content + end_string

    def __repr__(self):
        return (
            f"ParentNode(tag={self.tag}, children={self.children}, props={self.props})"
        )


def text_node_to_html_node(text_node):
    match text_node.text_type:
        case "text":
            return LeafNode(None, text_node.text)
        case "bold":
            return LeafNode("b", text_node.text)
        case "italic":
            return LeafNode("i", text_node.text)
        case "code":
            return LeafNode("code", text_node.text)
        case "link":
            ref_dict = {"href": text_node.url}
            return LeafNode("a", text_node.text, ref_dict)
        case "image":
            ref_dict = {"src": text_node.url, "alt": text_node.text}
            return LeafNode("img", "", ref_dict)
        case _:
            raise Exception("Invalid Text Type")


def markdown_to_html_node(markdown):
# Currently this function return a rather weird stupid html format
    props_list = []
    # Get markdown document into blocks
    blocks = markdown_to_blocks(markdown)


    for block in blocks:
        # Get all the words
        words = block.split()
        # Get the block type
        block_type = block_to_block_type(block)

        # If the block is a list, process it to remove ordered and unordered lists syntax
        if block_type == "unordered_list" or block_type == "ordered_list":
            list_children_nodes = helper_markdown_to_html_list(block)
        
        match block_type:
            case "heading":
                # Count the # to the heading numer. One # is h1,  ## is h2, etc
                heading_number = words[0].count("#")
                # If heading number is 6, it's invalid and the block is considered as a paragraph
                if heading_number > 6:
                   helper_markdown_to_html_paragraph(block, props_list) 
                else:
                    # Remove the # headings out of the block, remain other # if any
                    formatted_block = re.sub(r"#+", "", block, 1)
                    props_list.append(
                        LeafNode(tag=f"h{heading_number}", value=formatted_block)
                    )
            case "quote":
                formatted_block = block.removeprefix("> ").removesuffix("\n")
                props_list.append(LeafNode(tag="blockquote", value=formatted_block))
            case "unordered_list":
                props_list.append(ParentNode(tag="ul", children=list_children_nodes))
            case "ordered_list":
                props_list.append(ParentNode(tag="ol", children=list_children_nodes))
            case "code":
                # Remove all the code syntax, syntax: <pre><code></code></pre>
                code_value = block.removeprefix("```\n").removesuffix("\n```")
                code_html = LeafNode(tag="code", value=code_value)
                props_list.append(ParentNode(tag="pre", children=[code_html]))
            case "paragraph":
                helper_markdown_to_html_paragraph(block, props_list)

    return ParentNode(tag="div", children=props_list)

def helper_markdown_to_html_paragraph(block, props_list):
    children_leaf_node_list = []
    text_nodes = text_to_textnodes(block)
    for text_node in text_nodes:
        children_leaf_node_list.append(text_node_to_html_node(text_node))
    props_list.append(ParentNode(tag="p", children=children_leaf_node_list))

def helper_markdown_to_html_list(block):
    # Get all the lines
    lines = block.split("\n")
    list_children_nodes = []

    # Helper counter to remove all the ordered list syntax
    counter_ordererd_list = 1
    for line in lines:
        li_children_list = []
        # Get rid of all the list syntax
        formatted_line = (
            line.removeprefix(f"{counter_ordererd_list}. ")
            .removeprefix("* ")
            .removeprefix("- ")
        )
        # Convert the formatted line to text nodes
        text_nodes = text_to_textnodes(formatted_line)
        for text_node in text_nodes:
            # For every text node, add it html node version to the children list of the parent li node
            li_children_list.append(text_node_to_html_node(text_node))

        list_children_nodes.append(ParentNode(tag="li", children=li_children_list))
        counter_ordererd_list += 1 
    return list_children_nodes

def extract_title(markdown):
    blocks = markdown_to_blocks(markdown)
    
    
    block_type = block_to_block_type(blocks[0])
    # print(block_type)
    if block_type == "heading":
        # print(blocks[0])
        return blocks[0].removeprefix("# ").strip()
    else:
        raise Exception("A post must have an h1 header")





-------CUT THE READING FILE HERE------
## block.py

import re


def markdown_to_blocks(markdown):
    blocks = re.split(r"\n\s*\n", markdown.strip())
    return blocks


def block_to_block_type(single_block_markdown):
    character = single_block_markdown.split()
    lines = single_block_markdown.split("\n")
    count = 0
    item_set = set()
    counter_ordererd_list = 1

    if character[0].startswith("#"):
        return "heading"
    if len(character[0].split("```")) == 2 and len(character[-1].split("```")) == 2:
        return "code"
    for line in lines:
        count += 1
        if line.startswith(">"):
            item_set.add("quote")
        elif line.startswith("* ") or line.startswith("- "):
            item_set.add("unordered_list")
        elif line.startswith(f"{counter_ordererd_list}. "):
            counter_ordererd_list += 1
            item_set.add("ordered_list")
        else:
            count -= 1

    if count == len(lines) and len(item_set) == 1:
        return item_set.pop()

    return "paragraph"






